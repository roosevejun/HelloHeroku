<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:property-placeholder location="classpath:datasource.properties" ignore-unresolvable="true"/>
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>

            <tx:method name="get*" propagation="REQUIRED"
                       read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED"
                       read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED"
                       read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>

            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="interceptorPointCuts"
                      expression="execution(* com.tongtu.service.*(..))"/>
        <aop:pointcut id="interceptorPointCutsDao"
                      expression="execution(* *.*..*Dao*.*(..))"/>
        <aop:advisor advice-ref="txAdvice"
                     pointcut-ref="interceptorPointCutsDao"/>
    </aop:config>
    <bean id="persistenceProvider" class="org.hibernate.jpa.HibernatePersistenceProvider"/>
    <beans profile="default">
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.user}"></property>
            <property name="password" value="${jdbc.password}"/>
            <property name="filters" value="${jdbc.filter}"/>
            <property name="maxActive" value="${jdbc.maxActive}"/>
            <property name="initialSize" value="${jdbc.initialSize}"/>
            <property name="maxWait" value="${jdbc.maxWait}"/>
            <property name="minIdle" value="${jdbc.minIdle}"/>
            <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
            <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
            <property name="validationQuery" value="${jdbc.validationQuery}"/>
            <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
            <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
            <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
            <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
            <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
        </bean>

        <bean id="entityManagerFactory"
              class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <property name="persistenceProvider" ref="persistenceProvider"/>
            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
            </property>
            <property name="jpaDialect" ref="jpaDialect"/>
            <property name="packagesToScan">
                <list>
                    <value>com.tongtu.bean</value>
                </list>
            </property>
            <property name="loadTimeWeaver">
                <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
            </property>
            <property name="jpaProperties">
                <props>
                    <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                    <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use.second.level.cache}</prop>
                    <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use.query.cache}</prop>
                    <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}
                    </prop>
                    <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                    <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                    <prop key="hibernate.temp.use_jdbc_metadata_defaults">${hibernate.temp.use_jdbc_metadata_defaults}
                    </prop>
                    <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                    <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                    <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                    <prop key="hibernate.bytecode.use_reflection_optimizer">
                        ${hibernate.bytecode.use_reflection_optimizer}
                    </prop>
                    <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                    <prop key="hibernate.max_fetch_depth">${hibernate.max.fetch.depth}</prop>
                    <prop key="hibernate.max_fetch_depth">${hibernate.max.fetch.depth}</prop>
                </props>
            </property>

        </bean>
    </beans>

    <beans profile="prod">
        <bean class="java.net.URI" id="dbUrl">
            <constructor-arg value="#{systemEnvironment['DATABASE_URL']}"/>
        </bean>

        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
            <property name="url" value="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + ':' + @dbUrl.getPort() + @dbUrl.getPath() }"/>
            <property name="username" value="#{ @dbUrl.getUserInfo().split(':')[0] }"/>
            <property name="password" value="#{ @dbUrl.getUserInfo().split(':')[1] }"/>
            <property name="filters" value="${jdbc.filter}"/>
            <property name="maxActive" value="${jdbc.maxActive}"/>
            <property name="initialSize" value="${jdbc.initialSize}"/>
            <property name="maxWait" value="${jdbc.maxWait}"/>
            <property name="minIdle" value="${jdbc.minIdle}"/>
            <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
            <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
            <property name="validationQuery" value="${jdbc.validationQuery}"/>
            <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
            <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
            <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
            <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
            <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
        </bean>

        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <property name="persistenceProvider" ref="persistenceProvider"/>
            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
            </property>
            <property name="jpaDialect" ref="jpaDialect"/>
            <property name="packagesToScan">
                <list>
                    <value>com.tongtu.bean</value>
                </list>
            </property>
            <property name="loadTimeWeaver">
                <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
            </property>
            <property name="jpaProperties">
                <props>
                    <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                    <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use.second.level.cache}</prop>
                    <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use.query.cache}</prop>
                    <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}
                    </prop>
                    <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                    <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                    <prop key="hibernate.temp.use_jdbc_metadata_defaults">${hibernate.temp.use_jdbc_metadata_defaults}
                    </prop>
                    <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                    <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                    <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                    <prop key="hibernate.bytecode.use_reflection_optimizer">
                        ${hibernate.bytecode.use_reflection_optimizer}
                    </prop>
                    <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                    <prop key="hibernate.max_fetch_depth">${hibernate.max.fetch.depth}</prop>
                    <prop key="hibernate.max_fetch_depth">${hibernate.max.fetch.depth}</prop>
                </props>
            </property>
        </bean>
    </beans>

</beans>